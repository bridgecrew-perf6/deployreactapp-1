{"version":3,"sources":["components/Alert.js","components/About.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","alert","react_default","a","createElement","className","concat","type","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","About","_useState","useState","color","backgroundColor","_useState2","Object","slicedToArray","myStyle","setMyStyle","console","log","_useState3","_useState4","btntext","setBtnText","Fragment","style","mode","id","data-bs-toggle","data-bs-target","aria-expanded","aria-controls","aria-labelledby","data-bs-parent","onClick","Navbar","react_router_dom","to","title","aria-label","aria-current","aboutText","toggleMode","htmlFor","TextForm","text","setText","heading","value","onChange","event","target","rows","newText","showAlert","disabled","email","match","l","length","document","getElementById","select","navigator","clipboard","writeText","split","join","filter","element","defaultProps","App","setMode","setAlert","message","setTimeout","about","body","react_router","exact","path","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.f4c3ee03.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function Alert(props) {\r\n\r\n    const capitalize=(word)=>{\r\n          const lower  = word.toLowerCase();\r\n          return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n\r\n  return (\r\n      \r\n    props.alert && \r\n    <div>\r\n      <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n       <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg} \r\n        {/* <button\r\n          type=\"button\"\r\n          className=\"btn-close\"\r\n          data-bs-dismiss=\"alert\"\r\n          aria-label=\"Close\"\r\n        ></button> */}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React , { useState } from \"react\";\r\n\r\n\r\nexport default function About(props) {\r\n    const [myStyle, setMyStyle] = useState({\r\n        color:'black',\r\n        backgroundColor : 'white'\r\n    })\r\n    console.log(myStyle);\r\n    const [btntext, setBtnText] = useState(\"Enable Dark mode\");\r\n   const toggleStyle = () => {\r\n        if(myStyle.color === 'white')\r\n        {\r\n            setMyStyle({\r\n                color:'black',\r\n                backgroundColor: 'white'\r\n            })\r\n            setBtnText(\"Enable Light mode\")\r\n        }\r\n        else\r\n        {\r\n            setMyStyle({\r\n                color:'white',\r\n                backgroundColor:'black'\r\n            })\r\n            setBtnText(\"Enable Dark mode\");\r\n        }\r\n    }\r\n\r\n  return (\r\n    <>\r\n    <div style={{color:props.mode=== 'dark'?'white':'#042743'}}>\r\n    <div style={{color:props.mode=== 'dark'?'white':'#042743'}}>\r\n        <h1>About Us</h1>\r\n      <div className=\"accordion\" id=\"accordionExample\" style={myStyle} >\r\n        <div className=\"accordion-item\" style={{color:props.mode=== 'dark'?'white':'#042743'}}>\r\n          <h2 className=\"accordion-header\" id=\"headingOne\" style={{color:props.mode=== 'dark'?'white':'#042743'}}>\r\n            <button\r\n              className=\"accordion-button\"\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseOne\"\r\n              aria-expanded=\"true\"\r\n              aria-controls=\"collapseOne\" style={myStyle}\r\n            >\r\n              Accordion Item #1\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseOne\"\r\n            className=\"accordion-collapse collapse show\"\r\n            aria-labelledby=\"headingOne\"\r\n            data-bs-parent=\"#accordionExample\"\r\n            style={{color:props.mode=== 'dark'?'white':'#042743'}}\r\n          >\r\n            <div className=\"accordion-body\" style={myStyle}>\r\n              <strong>This is the first item's accordion body.</strong> It is\r\n              shown by default, until the collapse plugin adds the appropriate\r\n              classNamees that we use to style each element. These classNamees\r\n              control the overall appearance, as well as the showing and hiding\r\n              via CSS transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\" style={{color:props.mode=== 'dark'?'white':'#042743'}}>\r\n          <h2 className=\"accordion-header\" id=\"headingTwo\" style={{color:props.mode=== 'dark'?'white':'#042743'}}>\r\n            <button\r\n              className=\"accordion-button collapsed\"\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseTwo\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseTwo\" style={myStyle}\r\n            >\r\n              Accordion Item #2\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseTwo\"\r\n            className=\"accordion-collapse collapse\"\r\n            aria-labelledby=\"headingTwo\"\r\n            data-bs-parent=\"#accordionExample\"\r\n            style={{color:props.mode=== 'dark'?'white':'#042743'}}\r\n          >\r\n            <div className=\"accordion-body\" style={myStyle}>\r\n              <strong>This is the second item's accordion body.</strong> It is\r\n              hidden by default, until the collapse plugin adds the appropriate\r\n              classNamees that we use to style each element. These classNamees\r\n              control the overall appearance, as well as the showing and hiding\r\n              via CSS transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\" id=\"headingThree\" style={{color:props.mode=== 'dark'?'white':'#042743'}}>\r\n            <button\r\n              className=\"accordion-button collapsed\"\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseThree\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseThree\" style={myStyle}\r\n            >\r\n              Accordion Item #3\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseThree\"\r\n            className=\"accordion-collapse collapse\"\r\n            aria-labelledby=\"headingThree\"\r\n            data-bs-parent=\"#accordionExample\"\r\n            style={{color:props.mode=== 'dark'?'white':'#042743'}}\r\n          >\r\n            <div className=\"accordion-body\" style={myStyle}>\r\n              <strong>This is the third item's accordion body.</strong> It is\r\n              hidden by default, until the collapse plugin adds the appropriate\r\n              classNamees that we use to style each element. These classNamees\r\n              control the overall appearance, as well as the showing and hiding\r\n              via CSS transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <button onClick={toggleStyle} className=\"btn btn-success my-3\" > {btntext} </button>\r\n    </div>\r\n    </div>\r\n    </>\r\n  );\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n                <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                            <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n                        </li>\r\n                    </ul>\r\n                    {/* <form className=\"d-flex\">\r\n                        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n                        <button cla\r\n                        ssName=\"btn btn-primary\" type=\"submit\">Search</button>\r\n                    </form> */}\r\n                    <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n                        <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    aboutText: PropTypes.string.isRequired\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title: 'Set title here',\r\n    aboutText: 'About'\r\n  };","import React, { useState } from \"react\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default function TextForm(props) {\r\n  const [text, setText] = useState(\"\");\r\n \r\n   const emailExtracter = () =>{\r\n// console.log(text);\r\n   let email = text.match(/(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))/g);\r\n   console.log(email);\r\n   //let email = text.match(/([a-zA-Z0-9._+-]+@[a-zA-Z0-9._-]+\\.[a-zA-Z0-9._-]+)/gi);\r\n   \r\n\r\n if(email === null)\r\n {\r\n   alert(\"There is no gmail in the written text\");\r\n\r\n }\r\n else\r\n {\r\n  let l = email.length;\r\n  if(l ===1)\r\n  {\r\n    alert(\"There are \"+ l + \" Gmail ID in the text & which is : \" + email);\r\n  }\r\n  else\r\n  {\r\n    alert(\"There are \"+ l + \" Gmail ID's in the text & which are : \" + email);\r\n  }\r\n }\r\n \r\n }\r\n\r\n  const handleOnChnage = (event) => {\r\n    //console.log(\"On Chnage\");\r\n    setText(event.target.value);\r\n  };\r\n  const handleUpperCase = () => {\r\n    /*console.log(\"You have click on Convert to Upper Case button\");*/\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to uppercase!\",\"success\")\r\n  };\r\n  const handleLowerCase = () => {\r\n    /*console.log(\"You have click on Convert to Lower Case button\");*/\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n  };\r\n  const handleCopy =()=>{\r\n    let text = document.getElementById(\"mybox\");\r\n    text.select();\r\n    navigator.clipboard.writeText(text.value);\r\n  }\r\n  const handleSpace = () =>{\r\n    let newText = text.split(/[ ]+/);\r\n    setText(newText.join(\" \"));\r\n  }\r\n  return (\r\n      <>\r\n    <div className=\"container\" style={{color:props.mode === 'dark'?'white':'#042743'}}>\r\n      <div className=\"mb-3\">\r\n        <h1>{props.heading}</h1>\r\n\r\n        <textarea\r\n          className=\"form-control\"\r\n          id=\"mybox\"\r\n          value={text}\r\n          onChange={handleOnChnage}\r\n          rows=\"6\"\r\n          style={{backgroundColor:props.mode === 'dark'?'grey':'white', color:props.mode=== 'dark'?'white':'#042743'}}\r\n        ></textarea>\r\n      </div>\r\n      <button className=\"btn btn-primary mx-3\" onClick={handleUpperCase} disabled = {text === \"\"}>\r\n        Convert to Uppercase\r\n      </button>\r\n      <button className=\"btn btn-primary mx-3\" onClick={handleLowerCase} disabled = {text === \"\"}>\r\n        Convert to Lowercase\r\n      </button>\r\n      <button disabled = {text === \"\"} className=\"btn btn-primary mx-2\" onClick={emailExtracter} >\r\n        To extract Email id's \r\n      </button>\r\n      <button disabled = {text === \"\"} className=\"btn btn-primary mx-2\" onClick={handleCopy} >\r\n        To Copy the text \r\n      </button>\r\n      <button disabled = {text === \"\"} className=\"btn btn-primary mx-2\" onClick={handleSpace} >\r\n       To Remove Spaces\r\n      </button>\r\n    </div>\r\n    <div className=\"container my-3\" style={{color:props.mode=== 'dark'?'white':'#042743'}}>\r\n\r\n        <h2>Your text summary</h2>\r\n        <p>{text.split(\" \").filter((element) => { return element.length !== 0 }).length} words and {text.length} characters</p>\r\n        <p>You can read the content in {0.08 * text.split(\" \").filter((element) => { return element.length !== 0 }).length} minutes</p>\r\n        <h2>Preview</h2>\r\n        <p>{text.length>0?text:\"Enter something in the above text to preview it\"}</p>\r\n\r\n    </div>\r\n    </>\r\n  );\r\n}\r\n\r\nTextForm.propTypes = { heading: PropTypes.string.isRequired };\r\nTextForm.defaultProps = { heading: \"Enter text\" };\r\n","import React, { useState } from 'react';\nimport \"./App.css\";\nimport Alert from \"./components/Alert\";\nimport About from \"./components/About\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport {\n  BrowserRouter as Router,\n  Routes,\n  Route\n  \n} from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\");\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  };\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"#042743\";\n      showAlert(\"Dark mode has been enabled now\", \"success\");\n      // document.title=\"TextUtils-Dark Mode\";\n    } else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light mode has been enabled now\", \"Success\");\n      // document.title=\"TextUtils-Light Mode\";\n    }\n  };\n\n  return (\n    <>\n    <Router>\n      <Navbar\n        title=\"TextUtils\"\n        about=\"AboutTextUtils\"\n        mode={mode}\n        toggleMode={toggleMode}\n      />\n      <div className=\"container\">\n        <Alert alert={alert} />\n        <Routes>\n          <Route exact path=\"/about\" element={<About mode={mode}/>}>\n          </Route>\n\n        <Route exact path=\"/\" element={<TextForm showAlert={showAlert}\n             heading=\"Enter text below to analyze\"\n             mode={mode}/>}>\n            {/* <TextForm\n              showAlert={showAlert}\n              heading=\"Enter text below to analyze\"\n              mode={mode}\n            /> */}\n          </Route>\n        </Routes>\n        \n           {/* <TextForm\n             showAlert={showAlert}\n             heading=\"Enter text below to analyze\"\n             mode={mode}\n           /> */}\n       \n        {/* <About /> */}\n      </div>\n      </Router>\n    </>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}